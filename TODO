- use malloc/free when moving blocks to/from GPU. This way the GPU node does not need as much memory (but we can use swap...)
- Still sometimes eating all CPU (800% !, 100% would be OK) while everything should be running on GPU?! It seems to have openmp
  busy wait threads as well as cuda initiated threads.
- write kernels in .h files that can be included by both openmp and cuda code.
- try using local memory for derivatives in CUDA (avooid jumping in memory)
- large memory cuda: something's not right with memory transfers - slow?
- CUDA: Does CN with absorbing boundaries work correctly??
  write CUDA version so that driver.c scale_wf does not have to fetch data from GPU
- Poisson solver for other than periodic BC
- multi GPU support (at least be able to select GPU). Can we use streams?
- Fortran support: iso_c_binding, interface / end interface.

also fgrep TODO *.[ch] to find out more specific issues.

